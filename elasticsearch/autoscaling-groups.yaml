---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Elasticsearch ECS Host Autoscaling Group'

Parameters:
  Environment:
    Description: Environment to deploy. Use staging for limited resources and no alerts.
    Type: String
    Default: Staging
    AllowedValues:
    - Staging
    - Production
  EcsAmi:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id
  EcsCluster:
    Description: ECS Cluster Name
    Type: String
  KeyName:
    Description: SSH Key Name
    Type: AWS::EC2::KeyPair::KeyName
  SecurityGroup:
    Description: ECS Instance Security Group
    Type: AWS::EC2::SecurityGroup::Id
  AvailabilityZones:
    Description: Availability Zones
    Type: List<AWS::EC2::AvailabilityZone::Name>
  Subnets:
    Description: Subnets
    Type: List<AWS::EC2::Subnet::Id>
  InstanceCount:
    Description: Number of instances to maintain
    Type: String

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsCluster

  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${Environment}-ecs-asg # Update requires: Replacement
      LaunchConfigurationName: !Ref LaunchConfiguration
      AvailabilityZones: !Ref AvailabilityZones         # Update requires: No Interruption
      DesiredCapacity: !Ref InstanceCount               # Update requires: No interruption
      MinSize: !Ref InstanceCount                       # Update requires: No interruption
      MaxSize: !Ref InstanceCount                       # Update requires: No interruption
      Cooldown: 600                                     # Update requires: No interruption
      HealthCheckGracePeriod: 30                        # Update requires: No interruption
      HealthCheckType: EC2                              # Update requires: No interruption
      Tags:
        - Key: elasticsearch-cluster
          Value: !Ref EcsCluster # TODO: Change this to something more sensible
          PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref Subnets

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: "/dev/xvdcz"
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
            DeleteOnTermination: true
      EbsOptimized: False
      ImageId: !Ref EcsAmi
      InstanceMonitoring: true
      InstanceType: t2.large
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SecurityGroup

    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${Environment}-ECSRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
